


### Registros

Creo que el mejor tutorial sobre el uso de registros es
[este](https://www.youtube.com/watch?v=I5QGlfbuCfs).

Lo primero que debe conocer es el comando para consultar todos los registros
que tiene en ese instante. Dicho comando es `:registers` o, de forma
abreviada, `:reg`.

Al lanzarlo, le aparecer√° una ventana emergente con una lista con todos los
registros que tiene. Los nombres de los registros comienzan siempre por un
signo de comillas dobles (`"`). Tras dicho signo, el nombre ser√° un n√∫mero,
una letra o alg√∫n otro signo. Seg√∫n el tipo de car√°cter que acompa√±e a las
comillas dobles, el registro tendr√° un significado, que explicamos m√°s
adelante.

Para acceder a un registro, la forma de hacerlo depender√° del modo en el que
se encuentre. Si est√° en modo normal, tendr√° que poner el nombre del
registro seguido de la acci√≥n que desee realizar sobre este. Por ejemplo,
para pegar en el texto el registro con nombre `"1`, ser√° tan sencillo como
introducir [‚Äù]{.kbd} [1]{.kbd} [p]{.kbd} (es decir, `"1p`).

Otro ejemplo, para copiar en el registro `a` la palabra en la que se
encuentra el cursor en modo normal, ser√≠a [‚Äù]{.kbd} [a]{.kbd} [y]{.kbd}
[i]{.kbd} [w]{.kbd} (o sea, `"ayiw`).

Para pegar el contenido de registro, cuando nos encontramos en modo insert,
se debe anteponer al designador del registro la combinaci√≥n [Ctrl]{.kbd} +
[r]{.kbd}. Por ejemplo, para pegar el contenido del registro 1, [Ctrl]{.kbd}
+ [r]{.kbd} [1]{.kbd} (`^r1`).


* * * *


Debe saber tambi√©n que el registro `""` es el registro sin nombre (_unnamed
register_). Cuando copia algo con [y]{.kbd} [y]{.kbd} (`yy`), el texto que
ha copiado aparecer√° en el registro sin nombre.

En realidad, son m√°s acciones las que almacenan datos en el registro sin
nombre. Todo lo que se haga con `d`, `c`, `s`, `x`, `y`; y sus versiones en
may√∫sculas. Por su parte, `p` y `P` pegan lo que hay en el registro sin
nombre; no es necesario especificar el designador del registro.

Seg√∫n la acci√≥n de estas que realice, adem√°s del registro sin nombre, se
almacenar√° esa informaci√≥n en otro registro. Por ejemplo, si hace `dd` sobre
una l√≠nea de texto, tambi√©n se almacenar√° en el registro 1. Si hace `yy`, en
el 0.

Conforme vaya borrando m√°s cosas, estas ir√°n apareciendo en el
registro 1 y, la que estaba antes en dicho registro, se pasa al 2. Luego, en
el siguiente borrado, se pone en el 1 y lo que hab√≠a en el 1 se pasa al 2 y
lo que hab√≠a en el 2 al 3. Y as√≠ sucesivamente hasta el 9.

Lo √∫nico que tiene que tener en cuenta con esto es que hay ciertos
movimientos que hacen que no cuente como una operaci√≥n de borrado. Por
ejemplo, `%`, `( )`, etc.


* * * *


En lo que respecta a los registros que se identifican con una letra (en
total, se tienen 26), ah√≠ se almacenan autom√°ticamente, por ejemplo, los
\[macros\] que creamos. El identificativo del macro en realidad se refiere
al del registro donde se almacenar√°. Sabiendo esto, podremos editar un macro
si nos equivocamos al construirlo, sin necesidad de reconstruirlo por
completo desde el principio.

Un macro se editar√≠a haciendo lo siguiente. Suponga que nos referimos al
macro en el registro `a`. Entonces, tendr√≠amos que hacer

```vim
let @a=''
```

y poner entre esas comillas lo que deseemos introducir. Pero si el macro ya
lo hab√≠a creado, puede poner su cursor entre las comillas e insertar el
contenido como ya hemos dicho cuando est√° en modo insert ([Ctrl]{.kbd} +
[r]{.kbd} [a]{.kbd}). Luego, sobre eso, har√° las modificaciones que desee.
Debe tener tambi√©n en cuenta que ah√≠ aparecer√° la orden de la tecla
[Esc]{.kbd} como ``, que, aunque se parezca a un gorro seguido de apertura
de corchetes, `^[`, no lo es. El s√≠mbolo que queremos se introduce, en modo
insert, con [Crtl]{.kbd} + [v]{.kbd} [Esc]{.kbd}.

Registros de solo lectura.



